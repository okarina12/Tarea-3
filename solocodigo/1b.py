# -*- coding: utf-8 -*-
"""1b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ki43XrBgkyJBlN6WRbEP8HXx_yAod1AY
"""

import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import numpy as np
from numpy import asarray
from matplotlib import pyplot as plt

a = np.arange(-1,1,0.005)
b = asarray([1.0+2.0*i+(4.0*(i**3.0)) for i in a])
print(a.min(), a.max(), b.min(), b.max())

a = a.reshape((len(a), 1))
b = b.reshape((len(b), 1))

scale_a = MinMaxScaler()
a = scale_a.fit_transform(a)
scale_b = MinMaxScaler() 
b = scale_b.fit_transform(b)
print(a.min(), a.max(), b.min(), b.max())

model = Sequential()
model.add(Dense(10, input_dim=1, activation='tanh', kernel_initializer='he_uniform'))
model.add(Dense(10, activation='sigmoid', kernel_initializer='he_uniform'))
model.add(Dense(1))

model.summary()

model.compile(loss='mse', optimizer='Adam')

model.fit(a, b, epochs=450, batch_size=10, verbose=1)

b_pred = model.predict(a)

a_plot = scale_a.inverse_transform(a)
b_pred_plot = scale_b.inverse_transform(b_pred)

fig, ax = plt.subplots(figsize=(15,5))
plt.plot(a_plot,b_pred_plot, label='Solución con la Red Neuronal')

plt.plot(a_plot,1.0+2.0*a_plot+(4.0*(a_plot**3.0)), label='Gráfica de la función original', color='yellow')

plt.title('1 + 2x + 4x^3')
plt.xlabel('Variable de entrada (x)')
plt.ylabel('Variable de salida (y)')
plt.legend()
plt.grid(which='both')
plt.show()

b = 1.0+2.0*a_plot+(4.0*(a_plot**3.0))
print('MSE: %.3f' % mean_squared_error(b, b_pred_plot))

