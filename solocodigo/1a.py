# -*- coding: utf-8 -*-
"""1a.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_F7dcirhA6GmDoZIyEMcY4sPq_5AfKtY
"""

import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import numpy as np
from numpy import asarray
from matplotlib import pyplot as plt

a =np.arange(-1,1,0.005)
b = asarray([(np.sin(i*np.pi))*3 for i in a])
print(a.min(), a.max(), b.min(), b.max())

a = a.reshape((len(a),1))
b = b.reshape((len(b),1))

scale_a = MinMaxScaler()
a = scale_a.fit_transform(a)
scale_b = MinMaxScaler()
b = scale_b.fit_transform(b)
print(a.min(),a.max(), b.min(), b.max())

modelo = Sequential()
modelo.add(Dense(10, input_dim=1, activation='tanh', kernel_initializer='he_uniform'))
modelo.add(Dense(10, activation='sigmoid', kernel_initializer='he_uniform'))
modelo.add(Dense(1))

modelo.summary()

modelo.compile(loss='mse', optimizer='Adam')

modelo.fit(a, b, epochs=350, batch_size=10, verbose=1)

b_pred = modelo.predict(a)

a_plot = scale_a.inverse_transform(a)
b_pred_plot = scale_b.inverse_transform(b_pred)

fig, ax = plt.subplots(figsize=(15,10))
plt.plot(a_plot, b_pred_plot, label='Gr치fica de soluci칩n con la red neuronal')
plt.plot(a_plot,(np.sin(a_plot*np.pi))*3, label= 'Gr치fica de la funci칩n original', color='c')

plt.title('3 sin(pix)')
plt.xlabel('Variable de entrada (x)')
plt.ylabel('Variable de salida(y)')
plt.grid(which='both')
plt.legend()
plt.show()

b = (np.sin(a_plot*np.pi))*3
# reporte del error del modelo
print('MSE: %.3f' % mean_squared_error(b, b_pred_plot))